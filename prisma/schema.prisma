generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better-auth generated tables

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  emailVerified Boolean  @default(false)
  name          String?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  sessions   Session[]
  accounts   Account[]
  purchases  Purchase[]
  activities UserActivity[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  ipAddress String?
  userAgent String?

  @@map("session")
}

model Account {
  id         String   @id @default(cuid())
  userId     String
  provider   String   @default("credential") // Default to credential
  providerId String
  accountId  String
  password   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?

  @@unique([provider, providerId])
  @@map("account")
}

// Custom business tables

enum ProductType {
  FULL_ACCESS
  INDIVIDUAL_STACK
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Purchase {
  id              String         @id @default(cuid())
  userId          String
  productType     ProductType
  productId       String? // for individual stack purchases
  amount          Decimal        @db.Decimal(10, 2)
  currency        String         @default("USD")
  paymentProvider String // 'polar', 'stripe', etc.
  paymentId       String         @unique // external payment reference
  status          PurchaseStatus @default(PENDING)
  purchasedAt     DateTime       @default(now())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("purchases")
}

enum ActivityAction {
  VIEW_STACK
  COPY_PROMPT
  DOWNLOAD_FILE
  SEARCH
}

model UserActivity {
  id        String         @id @default(cuid())
  userId    String? // nullable for anonymous users
  sessionId String? // for anonymous tracking
  action    ActivityAction
  stackId   String? // stack identifier from config files
  agentId   String? // agent identifier
  platform  String? // 'cursor', 'claude_projects', 'claude_code'
  metadata  Json? // additional context
  createdAt DateTime       @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("user_activity")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
